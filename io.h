#include "xdrfile.h"
#include "xdrfile_xtc.h"
#include "xdrfile_trr.h"

class IO{
    private:
    XDRFILE *xdf = nullptr;

    public:
    void open(std::string fileName){
        fileName = fileName + ".xtc";
        xdf = xdrfile_open(fileName.c_str(), "w");
    }

    void close(){
        xdrfile_close(xdf);
    }

    void to_xtc(Particles& p, std::vector<double> d, int step, int time){
        matrix box;
        box[0][0] = d[0];
        box[0][1] = 0.0;
        box[0][2] = 0.0;
        box[1][0] = d[1];
        box[1][1] = 0.0;
        box[1][2] = 0.0;
        box[2][0] = d[2];
        box[2][1] = 0.0;
        box[2][2] = 0.0;

        
        if (xdf != nullptr) {
            rvec *ps = new rvec[p.tot];
            size_t N = 0;

            for (int i = 0; i < p.tot; i++) {
                ps[i][0] = p[i]->pos[0] * 0.1 + d[0] * 0.5;
                ps[i][1] = p[i]->pos[1] * 0.1 + d[1] * 0.5;
                ps[i][2] = p[i]->pos[2] * 0.1 + d[2] * 0.5; 
            }

            write_xtc(xdf, p.tot, step, time, box, ps, 1000);

            delete[] ps;
        }
        else{
            printf("Could not open xtc file!\n");
            exit(0);
        }
    }

    void to_gro(std::string fileName, Particles& p, std::vector<double> d){
        int i = 0;
        fileName = fileName + ".gro";
        FILE *f = fopen(fileName.c_str(), "w");
        if(f == NULL){
            printf("Can't open file!\n");
            exit(1);
        }

        fprintf(f, "Generated by Slaymulator, t=%i\n", 0);
        fprintf(f, "%d\n", p.tot);
        for(i = 0; i < p.tot; i++){
            //printf("Saving state %d\n", i);
            fprintf(f, "%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", i + 1, "ion",
                    p[i]->name.c_str(), i + 1,
                    p[i]->pos[0] * 0.1 + d[0] * 0.5,
                    p[i]->pos[1] * 0.1 + d[1] * 0.5,
                    p[i]->pos[2] * 0.1 + d[2] * 0.5);
        }
        fprintf(f, "%lf    %lf     %lf\n", d[0], d[1], d[2]);
        fclose(f);
    }
};