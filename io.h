#pragma once

#include "particles.h"


class IO{
    public:

    static void to_gro(std::string fileName, Particles& p, std::vector<double> d){
        fileName = fileName + ".gro";
        FILE *f = fopen(fileName.c_str(), "w");
        if(f == NULL){
            printf("Can't open file!\n");
            exit(1);
        }

        fprintf(f, "Generated by Slaymulator, t=%i\n", 0);
        fprintf(f, "%d\n", p.tot);
        for(unsigned int i = 0; i < p.tot; i++){
            //printf("Saving state %d\n", i);
            fprintf(f, "%5d%-5s%5s%5d%8.3f%8.3f%8.3f\n", i + 1, "ion",
                    p[i]->name.c_str(), i + 1,
                    p[i]->pos[0] * 0.1 + d[0] * 0.5,
                    p[i]->pos[1] * 0.1 + d[1] * 0.5,
                    p[i]->pos[2] * 0.1 + d[2] * 0.5);
        }
        fprintf(f, "%lf    %lf     %lf\n", d[0], d[1], d[2]);
        fclose(f);
    }

        //Write xyz file
        template<typename T>
   static  void to_xyz(std::string fileName, T& p, std::vector<double> d){
        std::ofstream f (fileName + ".xyz");
        if (f.is_open())
        {
            f << p.size() << "\n\n";
            for(unsigned int i = 0; i < p.size(); i++){

                f << std::fixed << std::setprecision(3) << p[i]->name << " " <<  p[i]->pos[0] << " " << p[i]->pos[1] << " " << p[i]->pos[2] << "\n";
            }
            f << "10 10 10" << "\n";
            f.close();
        }
        else std::cout << "Unable to open file\n";

        std::ofstream fq (fileName + "_com.xyz");
        if (fq.is_open())
        {
            fq << p.size() << "\n\n";
            for(unsigned int i = 0; i < p.size(); i++){

                fq << std::fixed << std::setprecision(3) << p[i]->name << " " <<  p[i]->com[0] << " " << p[i]->com[1] << " " << p[i]->com[2] << "\n";
            }
            fq << d[0] << " " << d[1] << " " << d[2] << "\n";
            fq.close();
        }
        else std::cout << "Unable to open file\n";
    }

    //write checkpoint file
    static void to_cpt(std::string fileName, Particles& p, std::vector<double> d){
        std::ofstream f (fileName + ".cp");
        if (f.is_open())
        {
            for(unsigned int i = 0; i < p.tot; i++){

                f << std::fixed << std::setprecision(15) << " " <<  p[i]->com[0] << " " << p[i]->com[1] << " " << p[i]->com[2] << " " << 
                                                                    p[i]->pos[0] << " " << p[i]->pos[1] << " " << p[i]->pos[2] << " " << 
                                                                    p[i]->q << " " << p[i]->r << " " << p[i]->rf << " " << 
                                                                    p[i]->b << " " << p[i]->b_min << " " << p[i]->b_max << " " << p[i]->name << "\n";
            }
            f.close();
        }
        else std::cout << "Unable to open file";
    }
};